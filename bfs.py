import collections


def bfs(graph, root):
    seen, queue = set([root]), collections.deque([root])
    #print(seen)
    #print(queue)
    while queue:
        #print(queue)
        vertex = queue.popleft()
        visit(vertex)
        for node in graph[vertex]:
            if node not in seen:
                seen.add(node)
                queue.append(node)


def visit(n):
    print(n)

if __name__ == '__main__':

    graph = [[0, 16938.218002725473, 10247.251519672844, 14947.425152241693, 14614.05445050763], [16937.727519352335, 0, 20570.1316875763, 16549.80571847769, 16576.162310155876], [16294.04194595942, 13387.717894338273, 0,
                                                                                                                                                                            11396.925043854491, 11063.554342120431], [12304.90580075191, 15210.248885626777, 15937.30996897588, 0, 11943.340591555452], [11818.028043989907, 14723.371128864776, 15450.432212213876, 11430.106243115264, 0]]

    bfs(graph, 0)



    #graph = {0: [16938.218002725473, 10247.251519672844, 14947.425152241693, 14614.05445050763], 1: [16937.727519352335, 20570.1316875763, 16549.80571847769, 16576.162310155876], 2: [16294.04194595942, 13387.717894338273, 11396.925043854491, 11063.554342120431], 3: [12304.90580075191, 15210.248885626777, 15937.30996897588, 11943.340591555452], 4: [11818.028043989907, 14723.371128864776, 15450.432212213876, 11430.106243115264]}

for i in list 
if element in list is bigger than then pop left 







# import networkx as nw
# import matplotlib.pyplot as plt

# g = nw.random_regular_graph(3, 10)
# f = nw.dfs_tree(g, 0)

# nw.draw(g)
# plt.show()



